#pragma once

#include <frm/core/frm.h>
#include <frm/core/String.h>
#include <frm/core/Time.h>


#define FRM_LOG(...)          do { frm::internal::Log(__VA_ARGS__); } while (0)
#define FRM_LOG_ERR(...)      do { frm::internal::LogError(__VA_ARGS__); } while (0)
#ifdef FRM_DEBUG
	#define FRM_LOG_DBG(...)  do { frm::internal::LogDebug(__VA_ARGS__); } while (0)
#else
	#define FRM_LOG_DBG(...)  do { } while(0)
#endif

namespace frm {

enum LogType_
{
	LogType_Log,
	LogType_Error,
	LogType_Debug,
	
	LogType_Count
};
typedef int LogType;

// Typedef for log callbacks. Callbacks receive a message (as passed to the 
// FRM_LOG variant), plus an enum indicating whether the log was generated by
// FRM_LOG, FRM_LOG_ERR or FRM_LOG_DBG.
typedef void (LogCallback)(const char* _msg, LogType _type);

// Set the current log callback. The default is 0.
void SetLogCallback(LogCallback* _callback);

// Return current log callback. The default is 0.
LogCallback* GetLogCallback();


namespace internal {

void Log     (const char* _fmt, ...);
void LogError(const char* _fmt, ...);
void LogDebug(const char* _fmt, ...);

} // namespace internal


////////////////////////////////////////////////////////////////////////////////
// Log
// Message buffer with optional output file. Messages are stored in a ringbuffer
// and flush to the output file on overflow.
////////////////////////////////////////////////////////////////////////////////
class Log
{
public:
	typedef String<64> String;
	typedef LogType    Type;
	typedef Timestamp  Timestamp;

	struct Message
	{
		String    m_str;
		Type      m_type;
		Timestamp m_time;
	};

	// Allocate space for _bufferSize messages, optionally set the output file path.
	Log(int _bufferSize, const char* _outputPath = "");
	~Log();
	
	// Add a message to the buffer.
	void addMessage(const char* _msg, Type _type = LogType_Count);

	// Return the last message of _type, or the back of the buffer by default.
	const Message* getLastMessage(Type _type = LogType_Count) const;
	// Clear the cached ptr for _type.
	void clearLastMessage(Type _type = LogType_Count);
	
	// Flush to the output file.
	void flush();

	// Message access.
	int getMessageCount() const;
	const Message* getMessage(int _i) const;

	// Set the output file.
	void setOutput(const char* _path);
	

private:
	Message* m_lastMessage[LogType_Count] = {};

	struct Buffer;
	Buffer* m_buf;
};

} // namespace frm
